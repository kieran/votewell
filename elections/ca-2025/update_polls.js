// Generated by CoffeeScript 2.6.1
(function() {
  var NUM_RIDINGS, PROJ_COLUMNS, axios, cheerio, chunk, exec, fs, please_fetch, polls, util;

  fs = require('fs');

  axios = require('axios');

  cheerio = require('cheerio');

  ({chunk} = require('underscore'));

  util = require('util');

  ({exec} = require('child_process'));

  exec = util.promisify(exec);

  NUM_RIDINGS = 343;

  polls = [];

  PROJ_COLUMNS = 4;

  please_fetch = async function(url) {
    var data;
    console.log(`fetching ${url} ...`);
    try {
      ({data} = (await axios(url)));
    } catch (error) {
      console.log(`retrying ${url} ...`);
      ({data} = (await axios(url)));
    }
    return data;
  };

  (async function() {
    var $riding_page, $ridings_index, i, len, ref, results, riding, riding_url, riding_url_selector, riding_urls;
    try {
      await exec("git pull --rebase --autostash");
      $ridings_index = cheerio.load((await please_fetch("https://338canada.com/districts.htm")));
      riding_url_selector = 'table tbody tr td[align="left"] a[target="_blank"]';
      riding_urls = $ridings_index(riding_url_selector).toArray().map(function(el) {
        var ref, ref1;
        return (ref = el.attribs) != null ? (ref1 = ref.href) != null ? typeof ref1.trim === "function" ? ref1.trim() : void 0 : void 0 : void 0;
      });
      ref = [riding_urls[0]];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        riding_url = ref[i];
        $riding_page = cheerio.load((await please_fetch(riding_url)));
        riding = $("title").text().split(' | ')[0];
        debugger;
      }
      return results;
    } catch (error) {}
  })();

  //   throw "unexpected number of ridings: #{polls.length}" unless polls.length is NUM_RIDINGS
//   fs.writeFileSync "#{__dirname}/polls.json", JSON.stringify polls, undefined, 2

  //   # push to GH if there are poll changes
//   { stdout, stderr } = await exec "git diff #{__dirname}/polls.json"
//   if stdout
//     await exec "git add #{__dirname}/polls.json"
//     { stdout, stderr } = await exec "date +'%b %d at %l%p'"
//     await exec "git commit -m 'poll update - #{stdout.replace /\s+/g, ' '}'"
//     await exec "git push origin master"

  // catch err
//   console.log err

  //   for riding_number in [1..NUM_RIDINGS]
//     url = "https://338canada.com/#{3500+riding_number}e.htm"
//     console.log "fetching #{url} ..."

  //     riding = $("title").text().split(' | ')[0]

  //     ar = ($('div[id^="ridinghisto"] > text').toArray().map (el)-> $(el).text()).slice(PROJ_COLUMNS-1)

  //     projections = Object.fromEntries(chunk(ar, PROJ_COLUMNS).map((a)=>[a[0].toLowerCase(),parseFloat((a[PROJ_COLUMNS-1]).split('%')[0])]))
//     incumbent = chunk(ar, PROJ_COLUMNS).map((a)=>[a[0].toLowerCase(),parseFloat((a[PROJ_COLUMNS-2]).split('%')[0])]).toSorted((a,b)-> b[1] - a[1])[0][0]

  //     polls.push { riding, incumbent, ...projections }

}).call(this);
